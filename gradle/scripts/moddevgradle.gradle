import org.gradle.internal.os.OperatingSystem

ext.isJetbrainsRuntime = System.getProperty('java.vm.vendor').contains('JetBrains')

mixin {
    var refmap = add sourceSets.main, "mixins.ae2webintegration.refmap.json"
    slimJar.from refmap
    config 'mixins.ae2webintegration.json'
}

// we have to force LWJGL version 3.3.2, because RenderNurse requires Java 21, and LWJGL 3.3.1 cannot run on Java 21.
configurations.configureEach {
    resolutionStrategy {
        eachDependency {
            if (it.requested.group == "org.lwjgl") {
                it.useVersion("3.3.2")
                it.because("We need a version of LWJGL that supports java 21 for RenderDoc support")
            }
        }
    }
}

legacyForge {
    // Specify Forge version
    version = libs.versions.minecraftForge.get()

    parchment {
        minecraftVersion = libs.versions.minecraft.get()
        mappingsVersion = libs.versions.parchment.get()
    }

    // This line is optional. Access Transformers are automatically detected
    accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    interfaceInjectionData = project.files('injected_interfaces/interfaces.json')

    addModdingDependenciesTo(sourceSets.test)
//    addModdingDependenciesTo(sourceSets.extra)

    mods {
        // define mod <-> source bindings
        "${mod_id}" {
            sourceSet(sourceSets.main)
            sourceSet(sourceSets.client)
            sourceSet(sourceSets.test)
            sourceSet(sourceSets.extra)
            sourceSet(sourceSets.clientExtra)
        }
    }

    runs {
        client {
            client()
            sourceSet = sourceSets.clientExtra
            ideName = "Client 1"

            systemProperty('forge.enabledGameTestNamespaces', project.mod_id)
        }

        client2 {
            client()
            sourceSet = sourceSets.clientExtra
            ideName = "Client 2"

            programArguments.addAll('--username', 'YoungOnion', '--uuid', '3a27782d-6864-4814-a9fe-7c6931f29a8a')
            systemProperty('forge.enabledGameTestNamespaces', project.mod_id)
        }

        server {
            server()
            sourceSet = sourceSets.extra
            ideName = "Server"

            gameDirectory.set(file('run/server'))
            programArguments.addAll('--nogui', '--world', 'world-extra')
            systemProperty('forge.enabledGameTestNamespaces', project.mod_id)
        }

        // Client with GTM + Jade, EMI, AE2
        cleanClient {
            client()
            sourceSet = sourceSets.client
            ideName = "Clean Client"

            systemProperty('forge.enabledGameTestNamespaces', project.mod_id)
        }

        cleanServer {
            server()
            sourceSet = sourceSets.main
            ideName = "Clean Server"

            gameDirectory.set(file('run/server'))
            programArgument '--nogui'
            systemProperty('forge.enabledGameTestNamespaces', project.mod_id)
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            sourceSet = sourceSets.test
            ideName = "Game Tests"

            gameDirectory.set(file('run/gametest'))
            systemProperty('forge.enabledGameTestNamespaces', project.mod_id)
            environment('TEST', 'true')
        }

        data {
            data()
            sourceSet = sourceSets.main
            ideName = "Data Generation"

            gameDirectory.set(file('run/data'))
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll('--mod', project.mod_id)
            programArguments.addAll('--all')
            programArguments.addAll('--output', file('src/generated/resources/').getAbsolutePath())
            programArguments.addAll('--existing', file('src/main/resources/').getAbsolutePath())
        }

        String renderDocPath = System.getenv("RENDERDOC_LIB")
        // RenderDoc cannot run on macos so we don't add the config for mac users
        if(renderDocPath != null && !OperatingSystem.current().isMacOsX()) {
            create("renderDocClient") {
                client()
                sourceSet = sourceSets.client
                ideName = "Clean Client + RenderDoc (Requires Java 21)"

                programArguments.addAll('--username', 'screret', '--uuid', '1184eb79-5831-4f7d-b8f4-3a46fccf7a1d')

                systemProperty("neoforge.rendernurse.renderdoc.library", renderDocPath)
                if(OperatingSystem.current().isLinux()) {
                    environment("LD_PRELOAD", renderDocPath)
                }
                // parses out the render nurse jar path and adds as `-javaagent:${path}`
                jvmArguments.addAll(project.configurations.renderNurseCfg.incoming.files.elements.map { it.collect { "-javaagent:${it.asFile.absolutePath}" }})
                jvmArguments.addAll("--enable-preview", "--enable-native-access=ALL-UNNAMED")
            }
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            // Enable assertions for our classes in dev environment
            jvmArgument('-ea:com.kuba6000.ae2webintegration...')

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.INFO
        }
    }
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
